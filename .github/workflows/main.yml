name: .NET Agent FullAgent and MSIInstaller

on:
  pull_request:
    branches: [ main,net35/main ]
  push:
    branches: [ main ]
    workflow_dispatch:

env:
  scripts_path: ${{ github.workspace }}\build\scripts
  tools_path: ${{ github.workspace }}\build\Tools
  DOTNET_NOLOGO: true
  #<other env vars here>

jobs:

  # This builds both FullAgent and MSIInstaller since MSIInstaller requires FullAgent artifacts.
  build-test-fullagent-msi:
    name: Build and Test FullAgent and MSIInstaller

    runs-on: windows-2019

    env:
      fullagent_soluition_path: ${{ github.workspace }}\FullAgent.sln
      msi_soluition_path: ${{ github.workspace }}\src\Agent\MsiInstaller\MsiInstaller.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.1
    
    - name: Install dependencies for FullAgent.sln
      run: |
        Write-Host ${{ env.tools_path }}\nuget.exe restore ${{ env.fullagent_soluition_path }} -NoCache -Source `"https://www.nuget.org/api/v2`"
        ${{ env.tools_path }}\nuget.exe restore ${{ env.fullagent_soluition_path }} -NoCache -Source "https://www.nuget.org/api/v2"
      shell: powershell

    - name: Install dependencies for MsiInstaller.sln
      run: |
        Write-Host ${{ env.tools_path }}\nuget.exe restore ${{ env.msi_soluition_path }} -NoCache -Source `"https://www.nuget.org/api/v2`"
        ${{ env.tools_path }}\nuget.exe restore ${{ env.msi_soluition_path }} -NoCache -Source "https://www.nuget.org/api/v2"
      shell: powershell
    
    - name: Build FullAgent.sln
      run: |
        Write-Host "MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.fullagent_soluition_path }}"
        MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.fullagent_soluition_path }}
      shell: powershell

    - name: Create Self-signed code signing cert
      run: |
        Write-Host "New-SelfSignedCertificate -DnsName "Self-signed code signing cert" -Type CodeSigning -CertStoreLocation Cert:\CurrentUser\My -NotAfter (Get-Date).AddYears(100)"
        New-SelfSignedCertificate -DnsName "Self-signed code signing cert" -Type CodeSigning -CertStoreLocation Cert:\CurrentUser\My -NotAfter (Get-Date).AddYears(100)
      shell: powershell

    - name: Build MsiInstaller.sln x86
      run: |
        Write-Host "MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true -p:Platform=x86 ${{ env.msi_soluition_path }}"
        MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true -p:Platform=x86 ${{ env.msi_soluition_path }}
      shell: powershell

    - name: Build MsiInstaller.sln x64
      run: |
        Write-Host "MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true -p:Platform=x64 ${{ env.msi_soluition_path }}"
        MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true -p:Platform=x64 ${{ env.msi_soluition_path }}
      shell: powershell

    # - name: Unit Tests
    #   run: |
    #     Write-Host ${{ env.scripts_path }}\DotNet-Agent-CI-UnitTests.ps1
    #     ${{ env.scripts_path }}\DotNet-Agent-CI-UnitTests.ps1
    #   shell: powershell

    # - name: use this action, test solution dir
    #   uses: zyborg/dotnet-tests-report@v1.0.0
    #   with:
    #     test_results_path: ${{ github.workspace }}\TestResults\NUnit2-results.xml
    #     report_name: my_project_tests
    #     report_title: My Project Tests
    #     github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Unit Tests - AsyncLocalTests
      uses: zyborg/dotnet-tests-report@v1.0.0
      with:
        project_path: tests/Agent/AsyncLocalTests
        report_name: AsyncLocalTests
        report_title: AsyncLocalTests
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Unit Tests - CompositeTests
      uses: zyborg/dotnet-tests-report@v1.0.0
      with:
        project_path: tests/Agent/CompositeTests
        report_name: CompositeTests
        report_title: CompositeTests
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Unit Tests - Core.UnitTests
      uses: zyborg/dotnet-tests-report@v1.0.0
      with:
        project_path: tests/Agent/Core.UnitTests
        report_name: Core.UnitTests
        report_title: Core.UnitTests
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Unit Tests - NewRelic.Agent.Extensions.Tests
      uses: zyborg/dotnet-tests-report@v1.0.0
      with:
        project_path: tests/Agent/NewRelic.Agent.Extensions.Tests
        report_name: NewRelic.Agent.Extensions.Tests
        report_title: NewRelic.Agent.Extensions.Tests
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Unit Tests - ParsingTests
      uses: zyborg/dotnet-tests-report@v1.0.0
      with:
        project_path: tests/Agent/ParsingTests
        report_name: ParsingTests
        report_title: ParsingTests
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Unit Tests - NewRelic.Core.Tests
      uses: zyborg/dotnet-tests-report@v1.0.0
      with:
        project_path: tests/NewRelic.Core.Tests
        report_name: NewRelic.Core.Tests
        report_title: NewRelic.Core.Tests
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Unit Tests - AwsLambdaOpenTracerTests
      uses: zyborg/dotnet-tests-report@v1.0.0
      with:
        project_path: tests/AwsLambda/UnitTests/AwsLambdaOpenTracerTests
        report_name: AwsLambdaOpenTracerTests
        report_title: AwsLambdaOpenTracerTests
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Unit Tests - AwsLambdaWrapperTests
      uses: zyborg/dotnet-tests-report@v1.0.0
      with:
        project_path: tests/AwsLambda/UnitTests/AwsLambdaWrapperTests
        report_name: AwsLambdaWrapperTests
        report_title: AwsLambdaWrapperTests
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Archive the artifacts
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact-${{ github.run_id }}
        path: ${{ github.workspace }}\TestResults
