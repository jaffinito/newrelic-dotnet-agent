name: .NET Agent FullAgent and MSIInstaller

on:
  pull_request:
    branches: [ main,net35/main ]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  scripts_path: ${{ github.workspace }}\build\scripts
  tools_path: ${{ github.workspace }}\build\Tools
  DOTNET_NOLOGO: true
  #<other env vars here>

jobs:

  # This builds both FullAgent and MSIInstaller since MSIInstaller requires FullAgent artifacts.
  build-test-fullagent-msi:
    name: Build and Test FullAgent and MSIInstaller

    runs-on: windows-2019

    env:
      fullagent_soluition_path: ${{ github.workspace }}\FullAgent.sln
      msi_soluition_path: ${{ github.workspace }}\src\Agent\MsiInstaller\MsiInstaller.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.1
    
    - name: Install dependencies for FullAgent.sln
      run: |
        Write-Host ${{ env.tools_path }}\nuget.exe restore ${{ env.fullagent_soluition_path }} -NoCache -Source `"https://www.nuget.org/api/v2`"
        ${{ env.tools_path }}\nuget.exe restore ${{ env.fullagent_soluition_path }} -NoCache -Source "https://www.nuget.org/api/v2"
      shell: powershell

    - name: Install dependencies for MsiInstaller.sln
      run: |
        Write-Host ${{ env.tools_path }}\nuget.exe restore ${{ env.msi_soluition_path }} -NoCache -Source `"https://www.nuget.org/api/v2`"
        ${{ env.tools_path }}\nuget.exe restore ${{ env.msi_soluition_path }} -NoCache -Source "https://www.nuget.org/api/v2"
      shell: powershell
    
    - name: Build FullAgent.sln
      run: |
        Write-Host "MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.fullagent_soluition_path }}"
        MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.fullagent_soluition_path }}
      shell: powershell

    - name: Create Self-signed code signing cert
      run: |
        Write-Host "New-SelfSignedCertificate -DnsName "Self-signed code signing cert" -Type CodeSigning -CertStoreLocation Cert:\CurrentUser\My -NotAfter (Get-Date).AddYears(100)"
        New-SelfSignedCertificate -DnsName "Self-signed code signing cert" -Type CodeSigning -CertStoreLocation Cert:\CurrentUser\My -NotAfter (Get-Date).AddYears(100)
      shell: powershell

    - name: Build MsiInstaller.sln x86
      run: |
        Write-Host "MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true -p:Platform=x86 ${{ env.msi_soluition_path }}"
        MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true -p:Platform=x86 ${{ env.msi_soluition_path }}
      shell: powershell

    - name: Build MsiInstaller.sln x64
      run: |
        Write-Host "MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true -p:Platform=x64 ${{ env.msi_soluition_path }}"
        MSBuild.exe -m -p:Configuration=Release -p:AllowUnsafeBlocks=true -p:Platform=x64 ${{ env.msi_soluition_path }}
      shell: powershell

    - name: Unit Tests
      run: |
        Write-Host ${{ env.scripts_path }}\DotNet-Agent-CI-UnitTests.ps1
        ${{ env.scripts_path }}\DotNet-Agent-CI-UnitTests.ps1
        Write-Host "Creating TestResults directory to temporarily get around nunit limitation"
        mkdir TestResults

        $testDllPatterns = @('*Tests.dll', '*Test.dll', '*Test.Legacy.dll')

        Write-Host "Finding files for Framework NUnit tests"
        $frameworkTestPaths = @('Tests\Agent\UnitTests', 'Tests\NewRelic.Core.Tests')
        $frameworkTestFileNames = (Get-ChildItem -Recurse -Path $frameworkTestPaths -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release') } | Select Name -Unique)
        $frameworkFiles = (Get-ChildItem -Recurse -Path $frameworkTestPaths -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release')  })

        Write-Host "Building file list for Framework NUnit tests"
        $frameworkUnitTestPaths = @()
        for ($i = 0; $i -lt $frameworkTestFileNames.Length; $i++)
        { $frameworkFiles | ForEach-Object { if ($_.Name -eq $frameworkTestFileNames[$i].Name) { $frameworkUnitTestPaths += $_.FullName; Continue } } }

        Write-Host "Executing Framework NUnit Tests:"
        $frameworkUnitTestPaths | ForEach-Object { $_ }
        & '.\Build\Tools\NUnit-Console\nunit3-console.exe ' $frameworkUnitTestPaths '--result=TestResults\NUnit2-results.xml;format=nunit2'

        if ($LastExitCode -ne 0)
        { exit $LastExitCode }


        Write-Host "Finding files for .NET Core NUnit tests"
        $netCoreTestFileNames = (Get-ChildItem -Recurse -Path 'Tests\AwsLambda\UnitTests' -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release') } | Select Name -Unique)
        $netCoreFiles = (Get-ChildItem -Recurse -Path 'Tests\AwsLambda\UnitTests' -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release')  })

        Write-Host "Building file list for .NET Core NUnit tests"
        $netCoreUnitTestPaths = @()

        for ($i = 0; $i -lt $netCoreTestFileNames.Length; $i++)
        { $netCoreFiles | ForEach-Object { if ($_.Name -eq $netCoreTestFileNames[$i].Name) { $netCoreUnitTestPaths += $_.FullName; Continue } } }

        Write-Host "Executing .NET Core NUnit Tests:"
        $netCoreUnitTestPaths | ForEach-Object { $_ }

        Write-Host "dotnet vstest " $netCoreUnitTestPaths " /Settings:.\Tests\AwsLambda\UnitTests\settings.runsettings"
        dotnet vstest $netCoreUnitTestPaths /Settings:.\Tests\AwsLambda\UnitTests\settings.runsettings

        if ($LastExitCode -ne 0)
        { exit $LastExitCode }
      shell: powershell

    # - name: use this action, test solution dir
    #   uses: zyborg/dotnet-tests-report@v1.0.0
    #   with:
    #     test_results_path: ${{ github.workspace }}\TestResults\NUnit2-results.xml
    #     report_name: my_project_tests
    #     report_title: My Project Tests
    #     github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Archive the artifacts
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact-${{ github.run_id }}
        path: ${{ github.workspace }}\TestResults
